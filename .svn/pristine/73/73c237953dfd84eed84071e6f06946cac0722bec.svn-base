#include "StdAfx.h"
#include "RajonPost.h"

CRajonPost::CRajonPost(void)
{
	//Получаем список путей к директориям
	pPath = new CInitPath;
	pFileInfo = new CGetFileInfo(pPath);
	pLog = new CLogs;
}

CRajonPost::~CRajonPost(void)
{
	if (pFileInfo != NULL)
	{
		delete pFileInfo;
	}
	if (pLog != NULL)
	{
		delete pLog;
	}
	if (pPath != NULL)
	{
		delete pPath;
	}
}

// Отправка почты на конкретный район
list<CString> CRajonPost::SendPostToRajon()
{
	list<CString> m_InfoAboutCopyFile;

	for(it_RajonSrcDst = pPath->m_mapSGNISrcDst.begin();it_RajonSrcDst != pPath->m_mapSGNISrcDst.end(); ++it_RajonSrcDst)
	{		
		this->bErrorDirMove = false;
		strSrcFile = it_RajonSrcDst->second;
		strDstFile = it_RajonSrcDst->first;

		// Получаем список всех файлов из папки
		GetNameFileMailFromFolder(strSrcFile.GetBuffer());
		strSrcFile.ReleaseBuffer();
		for(itFileName = vFileName.begin();itFileName != vFileName.end(); ++itFileName)
		{
			//проверка на правильность имени файла
			m_strDstFolder = strDstFile;
			m_strDstFolder += *itFileName;

			m_strSrcFolder = strSrcFile;
			m_strSrcFolder += *itFileName;
			if (VerifyFileName(itFileName->GetBuffer()) == true)
			{
				if(this->bErrorDirMove == true)
				{
					break;
				}
				// Копирование файла в архив ОГНС
				if(MoveFile(m_strSrcFolder, sDstFullPath) == TRUE)
				{
					sLog.Format("'%s' + удачно скопирован в папку '%s'.\nВладелец %s\\%s", *itFileName, strArcPath, szDomainName, szFileOwner);
					pLog->WriteInFileLog(&pPath->m_LogToRajon, sLog.GetBuffer());
					sLog.ReleaseBuffer();
				}
				else
				{	
					sLog.Format("'%s' - в папку '%s' скопировать не удалось.\nВладелец %s\\%s", *itFileName, strArcPath, szDomainName, szFileOwner);
					pLog->WriteInFileLog(&pPath->m_LogToRajon, sLog.GetBuffer());
					sLog.ReleaseBuffer();
				}
				sLog.Format( "Копирование файла '%s' : удачно", *itFileName);
				m_InfoAboutCopyFile.push_back(sLog);
			}
			else
			{
				sLog.Format("Копирование файла '%s' : отложено", *itFileName);
				m_InfoAboutCopyFile.push_back(sLog);
			}
			itFileName->ReleaseBuffer();			
		}
	}
	vFileName.clear();
	return m_InfoAboutCopyFile;
}

// Отправка почты на все районы 
list<CString> CRajonPost::SendPostToAllRajon()
{
	bool bFileWork;
	list<CString> m_InfoAboutCopyFile;

	strSrcFile = pPath->m_PathOutAllRajonPost;
	// Получаем список всех файлов из папки
	GetNameFileMailFromFolder(strSrcFile.GetBuffer());
	strSrcFile.ReleaseBuffer();

	for(itFileName = vFileName.begin();itFileName != vFileName.end(); ++itFileName)
	{
		bFileWork = false;
		this->bErrorDirMove = false;

		for(it_RajonSrcDst = pPath->m_mapRajonSrcDst.begin();it_RajonSrcDst != pPath->m_mapRajonSrcDst.end(); ++it_RajonSrcDst)
		{
			strDstFile = it_RajonSrcDst->first;
			//проверка на правильность имени файла
			m_strDstFolder = strDstFile;
			m_strDstFolder += *itFileName;

			m_strSrcFolder = strSrcFile;
			m_strSrcFolder += *itFileName;

			bFileWork = VerifyFileName(itFileName->GetBuffer());
			if (this->bErrorDirMove == false)
			{	
				if ( bFileWork == true)
				{
					sLog.Format( "Копирование файла '%s' : удачно", *itFileName);
					m_InfoAboutCopyFile.push_back(sLog);
				}
				else
				{
					sLog.Format("Копирование файла '%s' : отложено", *itFileName);
					m_InfoAboutCopyFile.push_back(sLog);
					break;
				}
				itFileName->ReleaseBuffer();
			}
			else
			{
				break;
			}
		}	

		if(bFileWork == true && bErrorDirMove == false)
		{
			// Копирование файла в архив ОГНС
			if(MoveFile(m_strSrcFolder, sDstFullPath) == TRUE)
			{
				sLog.Format("'%s' + удачно скопирован в папку '%s'.\nВладелец %s\\%s", *itFileName, strArcPath, szDomainName, szFileOwner);
				pLog->WriteInFileLog(&pPath->m_LogToRajon, sLog.GetBuffer());
				sLog.ReleaseBuffer();
			}
			else
			{	
				sLog.Format("'%s' - в папку '%s' скопировать не удалось.\nВладелец %s\\%s", *itFileName, strArcPath, szDomainName, szFileOwner);
				pLog->WriteInFileLog(&pPath->m_LogToRajon, sLog.GetBuffer());
				sLog.ReleaseBuffer();
			}
		}
	}
	vFileName.clear();
	return m_InfoAboutCopyFile;
}

// Отправка почты на все районы + СГНИ
list<CString> CRajonPost::SendPostToAllRajonSGNI()
{
	bool bFileWork;
	list<CString> m_InfoAboutCopyFile;
	strSrcFile = pPath->m_PathOutAllRajonSGNIPost;
	// Получаем список всех файлов из папки
	GetNameFileMailFromFolder(strSrcFile.GetBuffer());
	strSrcFile.ReleaseBuffer();

	for(itFileName = vFileName.begin();itFileName != vFileName.end(); ++itFileName)
	{	
		bFileWork = false;
		this->bErrorDirMove = false;
		for(it_RajonSrcDst = pPath->m_mapSGNISrcDst.begin();it_RajonSrcDst != pPath->m_mapSGNISrcDst.end(); ++it_RajonSrcDst)
		{	
			strDstFile = it_RajonSrcDst->first;
			//проверка на правильность имени файла
			m_strDstFolder = strDstFile;
			m_strDstFolder += *itFileName;

			m_strSrcFolder = strSrcFile;
			m_strSrcFolder += *itFileName;

			bFileWork = VerifyFileName(itFileName->GetBuffer());
			if (this->bErrorDirMove == false)
			{
				if ( bFileWork == true)
				{
					sLog.Format( "Копирование файла '%s' : удачно", *itFileName);
					m_InfoAboutCopyFile.push_back(sLog);
				}
				else
				{
					sLog.Format("Копирование файла '%s' : отложено", *itFileName);
					m_InfoAboutCopyFile.push_back(sLog);
				}
				itFileName->ReleaseBuffer();
			}
		}	

		if(bFileWork == true && bErrorDirMove == false)
		{
			// Копирование файла в архив ОГНС
			if(MoveFile(m_strSrcFolder, sDstFullPath) == TRUE)
			{
				sLog.Format("'%s' + удачно скопирован в папку '%s'.\nВладелец %s\\%s", *itFileName, strArcPath, szDomainName, szFileOwner);
				pLog->WriteInFileLog(&pPath->m_LogToRajon, sLog.GetBuffer());
				sLog.ReleaseBuffer();
			}
			else
			{	
				sLog.Format("'%s' - в папку '%s' скопировать не удалось.\nВладелец %s\\%s", *itFileName, strArcPath, szDomainName, szFileOwner);
				pLog->WriteInFileLog(&pPath->m_LogToRajon, sLog.GetBuffer());
				sLog.ReleaseBuffer();
			}
		}
	}
	vFileName.clear();
	return m_InfoAboutCopyFile;
}

// Проверка на правильность имени файла для отправки
bool CRajonPost::VerifyFileName(char* strFileName)
{
	CString sLog;
	CString pFileName = strFileName;
	int nDotPos = 0;
	char szBufMsg[1024] = {0};
	map<CString, CString>::iterator itStandFile;
	bool bStandFile = false;
	list<CString> m_ListSpecMask;
	list<CString>::iterator it_ListSpecMask;	
	//	pFileName = pFileName.MakeLower();
	m_ListSpecMask = pPath->m_listMask;

	// Цикл обработки имени файла
	do 
	{
		memset(szDomainName, 0, 1024);
		memset(szFileOwner, 0, 1024);
		//Получение информации о владельце файла
		pFileInfo->GetFileOwner(m_strSrcFolder.GetBuffer(), szFileOwner, szDomainName);

		// Проверка имени файла со спецмаской
		it_ListSpecMask = m_ListSpecMask.begin();
		for(; it_ListSpecMask != m_ListSpecMask.end(); ++it_ListSpecMask)
		{	
			if (pFileName.Left(2) == *it_ListSpecMask)
			{
				//Создание необходимой папки и копирование файла в архив ОГНС
				if (CreateArcDir(strFileName, "Районы") == true)
				{					
					return true;
				}
				else
				{
					// ошибка if (CreateArcDir(strFileName) == true)
					return false;						
				}
			}
		}	

		//проверка имени файла с стандарными районными файлами
		for(itStandFile = pPath->m_mapRajonSpecFile.begin();itStandFile  != pPath->m_mapRajonSpecFile.end(); ++itStandFile )
		{
			CString sFirst = itStandFile->first;
			if (pFileName.Left(2) == sFirst)
			{
				bStandFile = true;
				break;
			}
		}
		// проверка длины имени файла
		if (pFileName.GetLength() < 13 || bStandFile == true)
		{
			// Поиск пробела в имени файла
			if(pFileName.Find(" ", 0) == -1)
			{
				if(pFileInfo->CheckFileNameSymbol(pFileName.GetBuffer()) == true)
				{
					// Имя файла в порядке
					pFileName.ReleaseBuffer();
					//Проверка размера файла
					if(pFileInfo->CheckFileSize(m_strSrcFolder.GetBuffer()) == true)
					{	
						//Создание необходимой папки и копирование файла в архив ОГНС
						if (CreateArcDir(strFileName, "Районы") == true)
						{					
							return true;
						}
						else
						{
							// ошибка if (CreateArcDir(strFileName) == true)
							return false;						
						}
					}
					else
					{	
						// if(pFileInfo->CheckFileSize(m_strSrcFolder.GetBuffer()) == true)
						if (this->bErrorDirMove == true)
						{
							return false;
						}
						SYSTEMTIME pTime;
						GetLocalTime(&pTime);
						if ((pPath->wMorningTime < pTime.wHour) && (pTime.wHour > pPath->wEveningTime))
						{
							// Ночное время
							m_strDstFolder = pPath->m_PathOutBigFile;
							m_strDstFolder += pFileName;
							MoveFileEx(m_strSrcFolder, m_strDstFolder, MOVEFILE_REPLACE_EXISTING );
							sLog.Format("'%s' - привышен размер файла. Допустимый размер файла с %2d до %2d - %d*1024*1024 байт, с %2d до %2d - %d*1024*1024 байт. Файл перемещён в папку %s.\nВладелец %s\\%s", pFileName, pPath->wMorningTime, pPath->wEveningTime, pPath->dwDayTimeFileSize, pPath->wEveningTime, pPath->wMorningTime, pPath->dwNightTimeFileSize, pPath->m_PathOutBigFile, szDomainName, szFileOwner);
							pLog->WriteInFileLog(&pPath->m_LogToRajon, sLog.GetBuffer());
							sLog.ReleaseBuffer();
							return false;
						}
						else
						{
							// Рабочее время
							sLog.Format("'%s' - привышен размер файла. Допустимый размер файла с %2d до %2d - %d*1024*1024 байт, с %2d до %2d - %d*1024*1024 байт.\nВладелец %s\\%s", pFileName, pPath->wMorningTime, pPath->wEveningTime, pPath->dwDayTimeFileSize, pPath->wEveningTime, pPath->wMorningTime, pPath->dwNightTimeFileSize, szDomainName, szFileOwner);
							pLog->WriteInFileLog(&pPath->m_LogToRajon, sLog.GetBuffer());
							sLog.ReleaseBuffer();
							return false;
						}
					}	
					m_strSrcFolder.ReleaseBuffer();
				}
				else 
				{
					// ошибка if(CheckFileNameSymbol(pFileName.GetBuffer()) == true)
					m_strDstFolder = pPath->m_PathOutError;
					m_strDstFolder += pFileName;
					MoveFileEx(m_strSrcFolder, m_strDstFolder, MOVEFILE_REPLACE_EXISTING );
					sprintf_s(szBufMsg, "'%s' - неверное имя файла, перемещён в папку '%s'\n>.\nВладелец %s\\%s", pFileName, pPath->m_PathOutError,szDomainName,szFileOwner);
					pLog->WriteInFileLog(&pPath->m_LogToRajon, szBufMsg);
					return false;
				}				
			}
			else
			{
				//ошибка if(pFileName.Find(" ", 0)!= -1)
				m_strDstFolder = pPath->m_PathOutError;
				m_strDstFolder += pFileName;
				MoveFileEx(m_strSrcFolder, m_strDstFolder, MOVEFILE_REPLACE_EXISTING );
				sprintf_s(szBufMsg, "'%s' - неверное имя файла, перемещён в папку '%s'\n>присутствует пробел в имени файла.\nВладелец %s\\%s", pFileName, pPath->m_PathOutError,szDomainName,szFileOwner);
				pLog->WriteInFileLog(&pPath->m_LogToRajon, szBufMsg);
				return false;
			}
		}
		else
		{
			//ошибка if (pFileName.GetLength() != 11)
			m_strDstFolder = pPath->m_PathOutError;
			m_strDstFolder += pFileName;
			MoveFileEx(m_strSrcFolder, m_strDstFolder,MOVEFILE_REPLACE_EXISTING );
			sprintf_s(szBufMsg, "'%s' - неверное имя файла, перемещён в папку '%s'\n>имя файла должно быть в формате '8.3'.\nВладелец %s\\%s", pFileName, pPath->m_PathOutError,szDomainName,szFileOwner);
			pLog->WriteInFileLog(&pPath->m_LogToRajon, szBufMsg);
			return false;
		}
	} while (FALSE);
}
// Получаем список файлов подготовленных на отправку в Районы из ГНС в Запорожской области
void CRajonPost::GetNameFileMailFromFolder(char* pFolderPath)
{
	HANDLE hFindFile;
	WIN32_FIND_DATA pFindData;
	CString pPath = pFolderPath;
	CString strFile;
	pPath += "*";

	//очистка массива записанных файлов
	vFileName.clear();

	//ищем файлы в папке
	hFindFile = FindFirstFile(pPath, &pFindData);
	if (hFindFile != INVALID_HANDLE_VALUE )
	{
		do 
		{
			if (!(pFindData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY))
			{
				//приводим к нижнему регистру
				strFile = pFindData.cFileName;
				strFile = strFile.MakeLower();
				//добавляем только имя файла в список
				vFileName.push_back(strFile);
			}		
		} while (FindNextFile(hFindFile, &pFindData));		
	}
}

// Создание директории для конкретного управления, с текущим месяцем и днём
bool CRajonPost::CreateArcDir(char* szFileName, char *szDestination)
{
	map<CString, CString>::iterator itSpecFile;
	bool bSpecFile = false;
	bool bDedicatedFile = false;
	bool bRet = false;
	int nPos;
	CString sPostArcDirectory;
	CString sFileName = szFileName;
	CString sLog;
	CString sDirPath;
	CString sUprID;
	SYSTEMTIME pTime;
	// Получаем текущий день, месяц и год для структуры папок
	GetLocalTime(&pTime);

	bErrorDirMove = false;

	//Формирование пути каталога, в зависимости от типа файла

	//Проверка спецмасок
	for(itSpecFile = pPath->m_mapRajonSpecFile.begin();itSpecFile != pPath->m_mapRajonSpecFile.end(); ++itSpecFile)
	{
		if (sFileName.Left(2) == itSpecFile->first)
		{
			sDirPath.Format("%s\\%d\\%s\\Упр-%s\\%02d\\Отправлено\\%02d", pPath->m_PathArcPost, pTime.wYear, szDestination, itSpecFile->second, pTime.wMonth, pTime.wDay);
			bSpecFile = true;
			break;
		}
	}

	//Проверка файлов перенаправленнх по служебным для Районов
	sPostArcDirectory = CheckDedicatedFile(szFileName);
	if (!sPostArcDirectory.IsEmpty())
	{
		sDirPath.Format("%s\\%d\\%s\\%s\\%02d\\Отправлено\\%02d", pPath->m_PathArcPost, pTime.wYear, szDestination, sPostArcDirectory, pTime.wMonth, pTime.wDay);
	}

	//Работа со станадарнтыми масками
	if (bSpecFile == false && sPostArcDirectory.IsEmpty())
	{
		nPos = sFileName.Find(".",0);
		if(nPos == -1)
		{
			bErrorDirMove = true;
		}
		else
		{
			sUprID = sFileName.Mid(nPos+1,2);
			if (sFileName.Left(2) == "tr")
			{
				//файл: транзит
				if (sUprID.Left(1) == "8" || sUprID.Left(1) == "v")
				{
					sDirPath.Format("%s\\%d\\%s\\Транзит\\%02d\\Отправлено\\%02d", pPath->m_PathArcPost, pTime.wYear, szDestination, pTime.wMonth,  pTime.wDay);
				}
				else
				{
					bErrorDirMove = true;
				}
			}
			else if ((sFileName.Left(2) < "99") && (sFileName.Left(2) > "00"))
			{
				//файл: обычный
				if ((sUprID.Left(2) < "99") && (sUprID.Left(2) > "00"))
				{
					sDirPath.Format("%s\\%d\\%s\\Упр-%s\\%02d\\Отправлено\\%02d", pPath->m_PathArcPost, pTime.wYear, szDestination, sFileName.Left(2),pTime.wMonth, pTime.wDay);
				}
				else
				{
					bErrorDirMove = true;
				}
			}
			else if ((sFileName.Left(1) == "t") || (sFileName.Left(1) == "r"))
			{
				//файл: внутри областная транзитка T-срочная, R-обычная
				//получение кода управления из имени файла

				if ((sUprID.Left(2) < "99") && (sUprID.Left(2) > "00"))
				{
					sDirPath.Format("%s\\%d\\%s\\Упр-%s\\%02d\\Отправлено\\%02d", pPath->m_PathArcPost, pTime.wYear, szDestination, sUprID, pTime.wMonth, pTime.wDay);
				}
				else
				{
					bErrorDirMove = true;
				}
			}
			else
			{
				/*sDirPath.Format("%s\\%d\\%s\\Nostand\\%02d\\Отправлено\\%02d", pPath->m_PathArcPost, pTime.wYear, szDestination, pTime.wMonth, pTime.wDay);*/
				bErrorDirMove = true;
			}
		}
	}

	if (this->bErrorDirMove == false)
	{
		// Создаём каталог в Архиве ОГНС
		for(int i = 0; i < sDirPath.GetLength(); i++)
		{
			if (sDirPath.Mid(i, 1) == "\\")
			{
				CreateDirectory(sDirPath.Left(i), NULL);
				if (GetLastError()!= 0)
				{
					SetLastError(0);
				}
			}			
		}
		CreateDirectory(sDirPath, NULL);

		// Формирование пути файла для копирования
		sDstFullPath = sDirPath;
		sDstFullPath += "\\";
		strArcPath = sDstFullPath;
		sDstFullPath += sFileName;

		// Проверка на существование файла в архиве, если такой есть, то дописываем в конец текущее время и дату
		sDstFullPath = pFileInfo->CheckExistingFile(sDstFullPath.GetBuffer());
		sDstFullPath.ReleaseBuffer();

		//Перемещение файла в архив и в папку отправки
		bRet = CopyFileToDirectory(sFileName.GetBuffer());
	}
	else
	{
		// Перемещение файла в папку Ошибки для района
		bRet = MoveFileToErrorDirectoty(sFileName.GetBuffer());
	}

	sFileName.ReleaseBuffer();

	return bRet;
}


// Перемещение файла в папку Ошибки для района, без отправки на район
bool CRajonPost::MoveFileToErrorDirectoty(char *szFileName)
{
	CString pFileName = szFileName;
	char szBufMsg[1024] = {0};

	m_strDstFolder = pPath->m_PathOutError;
	m_strDstFolder += pFileName;
	MoveFileEx(m_strSrcFolder, m_strDstFolder, MOVEFILE_REPLACE_EXISTING );
	sprintf_s(szBufMsg, "'%s' - неверное имя файла, перемещён в папку '%s'\n>.\nВладелец %s\\%s", pFileName, pPath->m_PathOutError,szDomainName,szFileOwner);
	pLog->WriteInFileLog(&pPath->m_LogToRajon, szBufMsg);

	return false;
}

// Копирование файла в архив ОГНС и на отправку
bool CRajonPost::CopyFileToDirectory(char* szFileName)
{
	CString sFileName;
	CString sLog;

	sFileName = szFileName;

	// Копирование файла в папку для FossMail
	if(CopyFile(m_strSrcFolder, m_strDstFolder, FALSE))
	{
		sLog.Format("'%s' + удачно скопирован в папку '%s'.\nВладелец %s\\%s", sFileName, strDstFile, szDomainName, szFileOwner);
		pLog->WriteInFileLog(&pPath->m_LogToRajon, sLog.GetBuffer());
		sLog.ReleaseBuffer();
		return true;
	}
	else
	{
		LPTSTR msg;
		DWORD res= ::FormatMessage( FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_ALLOCATE_BUFFER, NULL, GetLastError(), 0, (LPTSTR)&msg, 0, NULL );
		if (res != 0)
		{
			sLog.Format("'%s' - в папку '%s' скопировать не удалось.\nПричина - %s\nВладелец %s\\%s",sFileName, strDstFile, msg, szDomainName, szFileOwner);
			pLog->WriteInFileLog(&pPath->m_LogToRajon, sLog.GetBuffer());
			sLog.ReleaseBuffer();
			LocalFree( msg );
		}
		else
		{
			sLog.Format("'%s' - в папку '%s' скопировать не удалось.\nПричина - неизвестно!\nВладелец %s\\%s",sFileName, strDstFile, szDomainName, szFileOwner);
			pLog->WriteInFileLog(&pPath->m_LogToRajon, sLog.GetBuffer());
			sLog.ReleaseBuffer();
		}
		return false;
	}
}
// Проверка файлов перенаправленнх по служебным для Районов
CString CRajonPost::CheckDedicatedFile(char* szFileName)
{
	CString strFileName = szFileName;
	CString strDedicatedFile;
	CString strFileNameMask;
	CString strFileExtMask;
	map<CString, CString>::iterator itDedicatedFile;

	for (itDedicatedFile = pPath->m_mapRajonDedicatedFile.begin(); itDedicatedFile != pPath->m_mapRajonDedicatedFile.end(); ++itDedicatedFile)
	{
		strDedicatedFile = itDedicatedFile->first;
		//Получение маски в имени файла
		int nSeparate = strDedicatedFile.Find("|");
		if (nSeparate == -1)
		{
			return "";
		}
		strFileNameMask = strDedicatedFile.Left(nSeparate);
		nSeparate++;
		//Получение маски в расширении файла
		strFileExtMask = strDedicatedFile.Right(strDedicatedFile.GetLength()-nSeparate);
		if (strFileNameMask == strFileName.Left(strFileNameMask.GetLength()))
		{
			//Проверка, что маска расширения должна быть конкретной
			if (strFileExtMask != "*")
			{
				if(strFileExtMask == strFileName.Right(strFileExtMask.GetLength()))
				{
					//Маска имени файла и расширения - совпали
					return itDedicatedFile->second;
				}
			}
			else
			{
				//Расширение может быть любым, а маска по имени файла - совпала
				return itDedicatedFile->second;
			}
		}
	}

	return "";
}
